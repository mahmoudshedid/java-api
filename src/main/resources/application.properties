server.port=9000

# ===============================
# = DATA SOURCE
# ===============================
# spring.datasource.url=jdbc:mysql://localhost:3306/java_api
# spring.datasource.username=java_api
# spring.datasource.password=siZ8KBLkCHcMnxlN
# spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:postgresql://127.0.0.1:5432/java_api
spring.datasource.username=api
# spring.datasource.password=123456
spring.datasource.driver-class-name=org.postgresql.Driver

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.database=POSTGRESQL

# ===============================
# = JPA / HIBERNATE
# ===============================
# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.id.new_generator_mappings = false
# spring.jpa.properties.hibernate.format_sql = true
# logging.level.org.hibernate.SQL=DEBUG
# logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
spring.jpa.hibernate.ddl-auto=update

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder
# ==============================================================
spring.queries.users-query=select email, password, active from user where email=? and trashed = 0 and active = 1
spring.queries.roles-query=select u.email, r.role from user u inner join user_role ur on(u.id=ur.user_id) inner join role r on(ur.role_id=r.id) where u.email=?